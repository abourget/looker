package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
)

/*LDAPUser l d a p user

swagger:model LDAPUser
*/
type LDAPUser struct {

	/* Array of user's email addresses and aliases for use in migration

	Read Only: true
	*/
	AllEmails []string `json:"all_emails,omitempty"`

	/* Primary email address

	Read Only: true
	*/
	Email string `json:"email,omitempty"`

	/* First name

	Read Only: true
	*/
	FirstName string `json:"first_name,omitempty"`

	/* Last Name

	Read Only: true
	*/
	LastName string `json:"last_name,omitempty"`

	/* LDAP's distinguished name for the user record

	Read Only: true
	*/
	LdapDn string `json:"ldap_dn,omitempty"`

	/* LDAP's Unique ID for the user

	Read Only: true
	*/
	LdapID string `json:"ldap_id,omitempty"`

	/* Array of user's roles (role names only)

	Read Only: true
	*/
	Roles []string `json:"roles,omitempty"`

	/* Link to ldap config

	Read Only: true
	*/
	URL strfmt.URI `json:"url,omitempty"`
}

// Validate validates this l d a p user
func (m *LDAPUser) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAllEmails(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRoles(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LDAPUser) validateAllEmails(formats strfmt.Registry) error {

	if swag.IsZero(m.AllEmails) { // not required
		return nil
	}

	return nil
}

func (m *LDAPUser) validateRoles(formats strfmt.Registry) error {

	if swag.IsZero(m.Roles) { // not required
		return nil
	}

	return nil
}
