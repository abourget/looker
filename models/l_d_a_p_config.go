package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
)

/*LDAPConfig l d a p config

swagger:model LDAPConfig
*/
type LDAPConfig struct {

	/* Allow alternate email-based login via '/login/email' for admins and for specified users with the 'login_special_email' permission. This option is useful as a fallback during ldap setup, if ldap config problems occur later, or if you need to support some users who are not in your ldap directory. Looker email/password logins are always disabled for regular users when ldap is enabled.
	 */
	AlternateEmailLoginAllowed bool `json:"alternate_email_login_allowed,omitempty"`

	/* (Write-only) Password for the LDAP account used to access the LDAP server
	 */
	AuthPassword string `json:"auth_password,omitempty"`

	/* Users will not be allowed to login at all unless a role for them is found in LDAP if set to true
	 */
	AuthRequiresRole bool `json:"auth_requires_role,omitempty"`

	/* Distinguished name of LDAP account used to access the LDAP server
	 */
	AuthUsername string `json:"auth_username,omitempty"`

	/* LDAP server hostname
	 */
	ConnectionHost string `json:"connection_host,omitempty"`

	/* LDAP host port
	 */
	ConnectionPort string `json:"connection_port,omitempty"`

	/* Use Transport Layer Security
	 */
	ConnectionTLS bool `json:"connection_tls,omitempty"`

	/* (Write-only) Array of ids of roles that will be applied to new users the first time they login via LDAP
	 */
	DefaultNewUserRoleIds []int64 `json:"default_new_user_role_ids,omitempty"`

	/* (Read-only) Roles that will be applied to new users the first time they login via LDAP

	Read Only: true
	*/
	DefaultNewUserRoles `json:"default_new_user_roles,omitempty"`

	/* Enable/Disable LDAP authentication for the server
	 */
	Enabled bool `json:"enabled,omitempty"`

	/* Don't attempt to do LDAP search result paging (RFC 2696) even if the LDAP server claims to support it.
	 */
	ForceNoPage bool `json:"force_no_page,omitempty"`

	/* (Read-only) Array of mappings between LDAP Groups and Looker Roles

	Read Only: true
	*/
	Groups `json:"groups,omitempty"`

	/* Base dn for finding groups in LDAP searches
	 */
	GroupsBaseDn string `json:"groups_base_dn,omitempty"`

	/* Identifier for a strategy for how Looker will search for groups in the LDAP server
	 */
	GroupsFinderType string `json:"groups_finder_type,omitempty"`

	/* LDAP Group attribute that signifies the members of the groups. Most commonly 'member'
	 */
	GroupsMemberAttribute string `json:"groups_member_attribute,omitempty"`

	/* Optional comma-separated list of supported LDAP objectclass for groups when doing groups searches
	 */
	GroupsObjectclasses string `json:"groups_objectclasses,omitempty"`

	/* LDAP Group attribute that signifies the user in a group. Most commonly 'dn'
	 */
	GroupsUserAttribute string `json:"groups_user_attribute,omitempty"`

	/* (Write-only) Array of mappings between LDAP Groups and arrays of Looker Role ids
	 */
	GroupsWithRoleIds `json:"groups_with_role_ids,omitempty"`

	/* (Read-only) Has the password been set for the LDAP account used to access the LDAP server

	Read Only: true
	*/
	HasAuthPassword *bool `json:"has_auth_password,omitempty"`

	/* Merge first-time ldap login to existing user account by email addresses. When a user logs in for the first time via ldap this option will connect this user into their existing account by finding the account with a matching email address. Otherwise a new user account will be created for the user.
	 */
	MergeNewUsersByEmail bool `json:"merge_new_users_by_email,omitempty"`

	/* When this config was last modified

	Read Only: true
	*/
	ModifiedAt string `json:"modified_at,omitempty"`

	/* User id of user who last modified this config

	Read Only: true
	*/
	ModifiedBy string `json:"modified_by,omitempty"`

	/* Set user roles in Looker based on groups from LDAP
	 */
	SetRolesFromGroups bool `json:"set_roles_from_groups,omitempty"`

	/* Link to get this item

	Read Only: true
	*/
	URL strfmt.URI `json:"url,omitempty"`

	/* Name of user record attributes used to indicate email address field
	 */
	UserAttributeMapEmail string `json:"user_attribute_map_email,omitempty"`

	/* Name of user record attributes used to indicate first name
	 */
	UserAttributeMapFirstName string `json:"user_attribute_map_first_name,omitempty"`

	/* Name of user record attributes used to indicate last name
	 */
	UserAttributeMapLastName string `json:"user_attribute_map_last_name,omitempty"`

	/* Name of user record attributes used to indicate unique record id
	 */
	UserAttributeMapLdapID string `json:"user_attribute_map_ldap_id,omitempty"`

	/* Distinguished name of LDAP node used as the base for user searches
	 */
	UserBindBaseDn string `json:"user_bind_base_dn,omitempty"`

	/* Name(s) of user record attributes used for matching user login id (comma separated list)
	 */
	UserIDAttributeNames string `json:"user_id_attribute_names,omitempty"`

	/* (Optional) Name of user record objectclass used for finding user during login id
	 */
	UserObjectclass string `json:"user_objectclass,omitempty"`
}

// Validate validates this l d a p config
func (m *LDAPConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDefaultNewUserRoleIds(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LDAPConfig) validateDefaultNewUserRoleIds(formats strfmt.Registry) error {

	if swag.IsZero(m.DefaultNewUserRoleIds) { // not required
		return nil
	}

	return nil
}
