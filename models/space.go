package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
)

/*Space space

swagger:model Space
*/
type Space struct {

	/* User Id of Creator

	Read Only: true
	*/
	CreatorID int64 `json:"creator_id,omitempty"`

	/* Dashboards

	Read Only: true
	*/
	Dashboards []DashboardBase `json:"dashboards,omitempty"`

	/* Unique Id

	Read Only: true
	*/
	ID string `json:"id,omitempty"`

	/* Space is a user's personal space
	 */
	IsPersonal bool `json:"is_personal,omitempty"`

	/* Looks

	Read Only: true
	*/
	Looks []LookWithDashboards `json:"looks,omitempty"`

	/* Unique Name

	Read Only: true
	*/
	Name string `json:"name,omitempty"`

	/* (Write-only) Id of Parent
	 */
	ParentID int64 `json:"parent_id,omitempty"`
}

// Validate validates this space
func (m *Space) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDashboards(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLooks(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Space) validateDashboards(formats strfmt.Registry) error {

	if swag.IsZero(m.Dashboards) { // not required
		return nil
	}

	return nil
}

func (m *Space) validateLooks(formats strfmt.Registry) error {

	if swag.IsZero(m.Looks) { // not required
		return nil
	}

	return nil
}
