package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*DatafluxQuery dataflux query

swagger:model DatafluxQuery
*/
type DatafluxQuery struct {

	/* Client Id
	 */
	ClientID string `json:"client_id,omitempty"`

	/* Column Limit
	 */
	ColumnLimit string `json:"column_limit,omitempty"`

	/* Dynamic Fields
	 */
	DynamicFields []string `json:"dynamic_fields,omitempty"`

	/* Expanded Share Url

	Read Only: true
	*/
	ExpandedShareURL string `json:"expanded_share_url,omitempty"`

	/* Fields
	 */
	Fields []string `json:"fields,omitempty"`

	/* Filter Config
	 */
	FilterConfig map[string]string `json:"filter_config,omitempty"`

	/* Filters
	 */
	Filters map[string]string `json:"filters,omitempty"`

	/* Unique Id

	Read Only: true
	*/
	ID int64 `json:"id,omitempty"`

	/* Limit
	 */
	Limit string `json:"limit,omitempty"`

	/* Model
	 */
	Model string `json:"model,omitempty"`

	/* Pivots
	 */
	Pivots []string `json:"pivots,omitempty"`

	/* Query Timezone
	 */
	QueryTimezone string `json:"query_timezone,omitempty"`

	/* Raw Total
	 */
	RowTotal string `json:"row_total,omitempty"`

	/* Runtime
	 */
	Runtime float64 `json:"runtime,omitempty"`

	/* Share Url

	Read Only: true
	*/
	ShareURL string `json:"share_url,omitempty"`

	/* Sorts
	 */
	Sorts []string `json:"sorts,omitempty"`

	/* Total
	 */
	Total bool `json:"total,omitempty"`

	/* View
	 */
	View string `json:"view,omitempty"`

	/* Visualization Config
	 */
	VisConfig map[string]string `json:"vis_config,omitempty"`

	/* Visible UI Sections
	 */
	VisibleUISections string `json:"visible_ui_sections,omitempty"`
}

// Validate validates this dataflux query
func (m *DatafluxQuery) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDynamicFields(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateFields(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateFilterConfig(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateFilters(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePivots(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSorts(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateVisConfig(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DatafluxQuery) validateDynamicFields(formats strfmt.Registry) error {

	if swag.IsZero(m.DynamicFields) { // not required
		return nil
	}

	return nil
}

func (m *DatafluxQuery) validateFields(formats strfmt.Registry) error {

	if swag.IsZero(m.Fields) { // not required
		return nil
	}

	return nil
}

func (m *DatafluxQuery) validateFilterConfig(formats strfmt.Registry) error {

	if swag.IsZero(m.FilterConfig) { // not required
		return nil
	}

	if err := validate.Required("filter_config", "body", m.FilterConfig); err != nil {
		return err
	}

	return nil
}

func (m *DatafluxQuery) validateFilters(formats strfmt.Registry) error {

	if swag.IsZero(m.Filters) { // not required
		return nil
	}

	if err := validate.Required("filters", "body", m.Filters); err != nil {
		return err
	}

	return nil
}

func (m *DatafluxQuery) validatePivots(formats strfmt.Registry) error {

	if swag.IsZero(m.Pivots) { // not required
		return nil
	}

	return nil
}

func (m *DatafluxQuery) validateSorts(formats strfmt.Registry) error {

	if swag.IsZero(m.Sorts) { // not required
		return nil
	}

	return nil
}

func (m *DatafluxQuery) validateVisConfig(formats strfmt.Registry) error {

	if swag.IsZero(m.VisConfig) { // not required
		return nil
	}

	if err := validate.Required("vis_config", "body", m.VisConfig); err != nil {
		return err
	}

	return nil
}
