package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
  strfmt "github.com/go-openapi/strfmt"

  "github.com/go-openapi/errors"
  "github.com/go-openapi/runtime"
  "github.com/go-openapi/validate"
  
  
)



/*ScheduledJob scheduled job

swagger:model ScheduledJob
*/
type ScheduledJob struct {
  
  
  /* When the ScheduledJob started

Read Only: true
 */
CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

  
  /* Vixie-Style crontab specification when to run

Read Only: true
 */
Crontab string `json:"crontab,omitempty"`

  
  /* Id of a dashboard

Read Only: true
 */
DashboardID int64 `json:"dashboard_id,omitempty"`

  
  /* Used for caching

Read Only: true
 */
DataSignature string `json:"data_signature,omitempty"`

  
  /* Used for caching

Read Only: true
 */
DataSlug string `json:"data_slug,omitempty"`

  
  /* When the ScheduledJob finished

Read Only: true
 */
FinalizedAt strfmt.DateTime `json:"finalized_at,omitempty"`

  
  /* Unique Id

Read Only: true
 */
ID int64 `json:"id,omitempty"`

  
  /* Id of a look

Read Only: true
 */
LookID int64 `json:"look_id,omitempty"`

  
  /* Url for the scheduled entity

Read Only: true
 */
LookerURL string `json:"looker_url,omitempty"`

  
  /* Id of a LookML dashboard

Read Only: true
 */
LookmlDashboardID string `json:"lookml_dashboard_id,omitempty"`

  
  /* Name

Read Only: true
 */
Name string `json:"name,omitempty"`

  
  /* Delivery should occur if data have changed since the last run

Read Only: true
 */
RequireChange *bool `json:"require_change,omitempty"`

  
  /* Delivery should occur if the dashboard look does not return results

Read Only: true
 */
RequireNoResults *bool `json:"require_no_results,omitempty"`

  
  /* Delivery should occur if running the dashboard or look returns results

Read Only: true
 */
RequireResults *bool `json:"require_results,omitempty"`

  
  /* Whether the row limit was reached when running

Read Only: true
 */
RowLimitReached string `json:"row_limit_reached,omitempty"`

  
  /* Runtime in seconds

Read Only: true
 */
Runtime int64 `json:"runtime,omitempty"`

  
  /* Scheduled job destinations

Read Only: true
 */
ScheduledJobDestination [] `json:"scheduled_job_destination,omitempty"`

  
  /* Detailed information about the job stage

Read Only: true
 */
ScheduledJobStage [] `json:"scheduled_job_stage,omitempty"`

  
  /* ScheduledPlan that initiated the ScheduledJob

Read Only: true
 */
ScheduledPlan  `json:"scheduled_plan,omitempty"`

  
  /* Status of the job

Read Only: true
 */
Status string `json:"status,omitempty"`

  
  /* Optional message describing status of the job

Read Only: true
 */
StatusDetail string `json:"status_detail,omitempty"`

  
  /* Timezone for interpreting the specified crontab (default is Looker instance timezone)

Read Only: true
 */
Timezone string `json:"timezone,omitempty"`

  
  /* Title

Read Only: true
 */
Title string `json:"title,omitempty"`

  
  /* User who owns this ScheduledPlan

Read Only: true
 */
User  `json:"user,omitempty"`

  
  
  
}


// Validate validates this scheduled job
func (m *ScheduledJob) Validate(formats strfmt.Registry) error {
  var res []error
  
  

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  if err := m.validateScheduledJobDestination(formats); err != nil {
    // prop
    res = append(res, err)
  }
  
  
  
  if err := m.validateScheduledJobStage(formats); err != nil {
    // prop
    res = append(res, err)
  }
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  

  if len(res) > 0 {
    return errors.CompositeValidationError(res...)
  }
  return nil
}





































func (m *ScheduledJob) validateScheduledJobDestination(formats strfmt.Registry) error {
  
  if swag.IsZero(m.ScheduledJobDestination) { // not required
    return nil
  }
  
  











  return nil
}






func (m *ScheduledJob) validateScheduledJobStage(formats strfmt.Registry) error {
  
  if swag.IsZero(m.ScheduledJobStage) { // not required
    return nil
  }
  
  











  return nil
}





















