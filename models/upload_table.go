package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*UploadTable upload table

swagger:model UploadTable
*/
type UploadTable struct {

	/* Relative time in English the table was built for this upload

	Read Only: true
	*/
	BuiltAt string `json:"built_at,omitempty"`

	/* Relative time in English the table was built for this upload

	Read Only: true
	*/
	BuiltAtRelative string `json:"built_at_relative,omitempty"`

	/* Date/Time this record was created

	Read Only: true
	*/
	CreatedAt string `json:"created_at,omitempty"`

	/* Date/Time this record was created

	Read Only: true
	*/
	CreatedAtRelative string `json:"created_at_relative,omitempty"`

	/* Id of the DB Connection

	Read Only: true
	*/
	DbConnectionID int64 `json:"db_connection_id,omitempty"`

	/* Name of the DB Connection

	Read Only: true
	*/
	DbConnectionName string `json:"db_connection_name,omitempty"`

	/* Definition of the table and uploaded file
	 */
	Definition map[string]string `json:"definition,omitempty"`

	/* Type of the uploaded file
	 */
	FileType string `json:"file_type,omitempty"`

	/* Unique Id

	Read Only: true
	*/
	ID int64 `json:"id,omitempty"`

	/* What the table will be named

	Read Only: true
	*/
	TableName string `json:"table_name,omitempty"`

	/* Link to get this item

	Read Only: true
	*/
	URL strfmt.URI `json:"url,omitempty"`

	/* What to name the new table
	 */
	ViewName string `json:"view_name,omitempty"`
}

// Validate validates this upload table
func (m *UploadTable) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDefinition(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UploadTable) validateDefinition(formats strfmt.Registry) error {

	if swag.IsZero(m.Definition) { // not required
		return nil
	}

	if err := validate.Required("definition", "body", m.Definition); err != nil {
		return err
	}

	return nil
}
