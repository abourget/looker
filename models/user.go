package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
  strfmt "github.com/go-openapi/strfmt"

  "github.com/go-openapi/errors"
  "github.com/go-openapi/runtime"
  "github.com/go-openapi/validate"
  
  
)



/*User user

swagger:model User
*/
type User struct {
  
  
  /* Model access filters.

Read Only: true
 */
AccessFilters [] `json:"access_filters,omitempty"`

  
  /* URL for the avatar image (may be generic)

Read Only: true
 */
AvatarURL strfmt.URI `json:"avatar_url,omitempty"`

  
  /* API user credentials

Read Only: true
 */
CredentialsAPI  `json:"credentials_api,omitempty"`

  
  /* API 3 credentials

Read Only: true
 */
CredentialsApi3 [] `json:"credentials_api3,omitempty"`

  
  /* Email/Password login credentials

Read Only: true
 */
CredentialsEmail  `json:"credentials_email,omitempty"`

  
  /* Embed credentials

Read Only: true
 */
CredentialsEmbed [] `json:"credentials_embed,omitempty"`

  
  /* Google auth credentials

Read Only: true
 */
CredentialsGoogle  `json:"credentials_google,omitempty"`

  
  /* LDAP credentials

Read Only: true
 */
CredentialsLdap  `json:"credentials_ldap,omitempty"`

  
  /* LookerOpenID credentials. Used for login by Looker Analysts

Read Only: true
 */
CredentialsLookerOpenid  `json:"credentials_looker_openid,omitempty"`

  
  /* Saml auth credentials

Read Only: true
 */
CredentialsSaml  `json:"credentials_saml,omitempty"`

  
  /* Two-factor credentials

Read Only: true
 */
CredentialsTotp  `json:"credentials_totp,omitempty"`

  
  /* Full name for display (available only if both first_name and last_name are set)

Read Only: true
 */
DisplayName string `json:"display_name,omitempty"`

  
  /* EMail address

Read Only: true
 */
Email string `json:"email,omitempty"`

  
  /* First name
 */
FirstName string `json:"first_name,omitempty"`

  
  /* ID string for user's home space
 */
HomeSpaceID string `json:"home_space_id,omitempty"`

  
  /* Unique Id

Read Only: true
 */
ID int64 `json:"id,omitempty"`

  
  /* Account has been disabled
 */
IsDisabled bool `json:"is_disabled,omitempty"`

  
  /* Last name
 */
LastName string `json:"last_name,omitempty"`

  
  /* User is identified as an employee of Looker

Read Only: true
 */
PresumedLookerEmployee *bool `json:"presumed_looker_employee,omitempty"`

  
  /* Array of ids of the roles for this user

Read Only: true
 */
RoleIds []int64 `json:"role_ids,omitempty"`

  
  /* Active sessions

Read Only: true
 */
Sessions [] `json:"sessions,omitempty"`

  
  /* Link to get this item

Read Only: true
 */
URL strfmt.URI `json:"url,omitempty"`

  
  /* User is identified as an employee of Looker who has been verified via Looker corporate authentication

Read Only: true
 */
VerifiedLookerEmployee *bool `json:"verified_looker_employee,omitempty"`

  
  
  
}


// Validate validates this user
func (m *User) Validate(formats strfmt.Registry) error {
  var res []error
  
  

  
  
  if err := m.validateAccessFilters(formats); err != nil {
    // prop
    res = append(res, err)
  }
  
  
  
  
  
  
  
  if err := m.validateCredentialsApi3(formats); err != nil {
    // prop
    res = append(res, err)
  }
  
  
  
  
  
  if err := m.validateCredentialsEmbed(formats); err != nil {
    // prop
    res = append(res, err)
  }
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  if err := m.validateRoleIds(formats); err != nil {
    // prop
    res = append(res, err)
  }
  
  
  
  if err := m.validateSessions(formats); err != nil {
    // prop
    res = append(res, err)
  }
  
  
  
  
  
  
  
  

  if len(res) > 0 {
    return errors.CompositeValidationError(res...)
  }
  return nil
}





func (m *User) validateAccessFilters(formats strfmt.Registry) error {
  
  if swag.IsZero(m.AccessFilters) { // not required
    return nil
  }
  
  











  return nil
}










func (m *User) validateCredentialsApi3(formats strfmt.Registry) error {
  
  if swag.IsZero(m.CredentialsApi3) { // not required
    return nil
  }
  
  











  return nil
}








func (m *User) validateCredentialsEmbed(formats strfmt.Registry) error {
  
  if swag.IsZero(m.CredentialsEmbed) { // not required
    return nil
  }
  
  











  return nil
}
































func (m *User) validateRoleIds(formats strfmt.Registry) error {
  
  if swag.IsZero(m.RoleIds) { // not required
    return nil
  }
  
  











  return nil
}






func (m *User) validateSessions(formats strfmt.Registry) error {
  
  if swag.IsZero(m.Sessions) { // not required
    return nil
  }
  
  











  return nil
}













