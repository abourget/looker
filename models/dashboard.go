package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
)

/*Dashboard dashboard

swagger:model Dashboard
*/
type Dashboard struct {

	/* Background color
	 */
	BackgroundColor string `json:"background_color,omitempty"`

	/* Description
	 */
	Description string `json:"description,omitempty"`

	/* Elements

	Read Only: true
	*/
	Elements []DashboardElements `json:"elements,omitempty"`

	/* Filters
	 */
	Filters []DashboardFilters `json:"filters,omitempty"`

	/* Is Hidden
	 */
	Hidden bool `json:"hidden,omitempty"`

	/* Unique Id

	Read Only: true
	*/
	ID string `json:"id,omitempty"`

	/* Layouts

	Read Only: true
	*/
	Layouts []DashboardLayout `json:"layouts,omitempty"`

	/* configuration option that governs how dashboard loading will happen.
	 */
	LoadConfiguration string `json:"load_configuration,omitempty"`

	/* Model

	Read Only: true
	*/
	Model string `json:"model,omitempty"`

	/* Is Read-only

	Read Only: true
	*/
	Readonly *bool `json:"readonly,omitempty"`

	/* Refresh Interval
	 */
	RefreshInterval string `json:"refresh_interval,omitempty"`

	/* Refresh Interval as Integer

	Read Only: true
	*/
	RefreshIntervalToI int64 `json:"refresh_interval_to_i,omitempty"`

	/* Show filters bar
	 */
	ShowFiltersBar bool `json:"show_filters_bar,omitempty"`

	/* Show title
	 */
	ShowTitle bool `json:"show_title,omitempty"`

	/* Space

	Read Only: true
	*/
	Space `json:"space,omitempty"`

	/* (Write-only) Id of Space
	 */
	SpaceID int64 `json:"space_id,omitempty"`

	/* Color of text on text tiles
	 */
	TextTileTextColor string `json:"text_tile_text_color,omitempty"`

	/* Tile background color
	 */
	TileBackgroundColor string `json:"tile_background_color,omitempty"`

	/* Tile text color
	 */
	TileTextColor string `json:"tile_text_color,omitempty"`

	/* Look Title
	 */
	Title string `json:"title,omitempty"`

	/* Title color
	 */
	TitleColor string `json:"title_color,omitempty"`

	/* Id of User

	Read Only: true
	*/
	UserID int64 `json:"user_id,omitempty"`
}

// Validate validates this dashboard
func (m *Dashboard) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateElements(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateFilters(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLayouts(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Dashboard) validateElements(formats strfmt.Registry) error {

	if swag.IsZero(m.Elements) { // not required
		return nil
	}

	return nil
}

func (m *Dashboard) validateFilters(formats strfmt.Registry) error {

	if swag.IsZero(m.Filters) { // not required
		return nil
	}

	return nil
}

func (m *Dashboard) validateLayouts(formats strfmt.Registry) error {

	if swag.IsZero(m.Layouts) { // not required
		return nil
	}

	return nil
}
