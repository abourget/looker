package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
)

/*SamlConfig saml config

swagger:model SamlConfig
*/
type SamlConfig struct {

	/* Allow alternate email-based login via '/login/email' for admins and for specified users with the 'login_special_email' permission. This option is useful as a fallback during ldap setup, if ldap config problems occur later, or if you need to support some users who are not in your ldap directory. Looker email/password logins are always disabled for regular users when ldap is enabled.
	 */
	AlternateEmailLoginAllowed bool `json:"alternate_email_login_allowed,omitempty"`

	/* Users will not be allowed to login at all unless a role for them is found in Saml if set to true
	 */
	AuthRequiresRole bool `json:"auth_requires_role,omitempty"`

	/* (Write-only) Array of ids of roles that will be applied to new users the first time they login via Saml
	 */
	DefaultNewUserRoleIds []int64 `json:"default_new_user_role_ids,omitempty"`

	/* (Read-only) Roles that will be applied to new users the first time they login via Saml

	Read Only: true
	*/
	DefaultNewUserRoles `json:"default_new_user_roles,omitempty"`

	/* Enable/Disable Saml authentication for the server
	 */
	Enabled bool `json:"enabled,omitempty"`

	/* (Read-only) Array of mappings between Saml Groups and Looker Roles

	Read Only: true
	*/
	Groups `json:"groups,omitempty"`

	/* Name of user record attributes used to indicate groups
	 */
	GroupsAttribute string `json:"groups_attribute,omitempty"`

	/* (Write-only) Array of mappings between Saml Groups and arrays of Looker Role ids
	 */
	GroupsWithRoleIds `json:"groups_with_role_ids,omitempty"`

	/* Identify Provider Audience (set in IdP config). Optional in Looker. Set this only if you want Looker to validate the audience value returned by the IdP.
	 */
	IdpAudience string `json:"idp_audience,omitempty"`

	/* Identify Provider Certificate (provided by IdP)
	 */
	IdpCert string `json:"idp_cert,omitempty"`

	/* Identify Provider Issuer (provided by IdP)
	 */
	IdpIssuer string `json:"idp_issuer,omitempty"`

	/* Identify Provider Url (provided by IdP)
	 */
	IdpURL string `json:"idp_url,omitempty"`

	/* When this config was last modified

	Read Only: true
	*/
	ModifiedAt string `json:"modified_at,omitempty"`

	/* User id of user who last modified this config

	Read Only: true
	*/
	ModifiedBy string `json:"modified_by,omitempty"`

	/* Merge first-time saml login to existing user account by email addresses. When a user logs in for the first time via saml this option will connect this user into their existing account by finding the account with a matching email address by testing the given types of credentials for existing users. Otherwise a new user account will be created for the user. This list (if provided) must be a comma separated list of string like 'email,ldap,google'
	 */
	NewUserMigrationTypes string `json:"new_user_migration_types,omitempty"`

	/* Set user roles in Looker based on groups from Saml
	 */
	SetRolesFromGroups bool `json:"set_roles_from_groups,omitempty"`

	/* Slug to identify configurations that are created in order to run a Saml config test

	Read Only: true
	*/
	TestSlug string `json:"test_slug,omitempty"`

	/* Link to get this item

	Read Only: true
	*/
	URL strfmt.URI `json:"url,omitempty"`

	/* Name of user record attributes used to indicate email address field
	 */
	UserAttributeMapEmail string `json:"user_attribute_map_email,omitempty"`

	/* Name of user record attributes used to indicate first name
	 */
	UserAttributeMapFirstName string `json:"user_attribute_map_first_name,omitempty"`

	/* Name of user record attributes used to indicate last name
	 */
	UserAttributeMapLastName string `json:"user_attribute_map_last_name,omitempty"`
}

// Validate validates this saml config
func (m *SamlConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDefaultNewUserRoleIds(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SamlConfig) validateDefaultNewUserRoleIds(formats strfmt.Registry) error {

	if swag.IsZero(m.DefaultNewUserRoleIds) { // not required
		return nil
	}

	return nil
}
