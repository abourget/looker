package look

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new look API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for look API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
AllLooks gets all looks

### Get all the looks.
*/
func (a *Client) AllLooks(params *AllLooksParams) (*AllLooksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAllLooksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "all_looks",
		Method:             "GET",
		PathPattern:        "/looks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AllLooksReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*AllLooksOK), nil
}

/*
Look gets look

### Get a Look.

Return detailed information about the Look and its associated Query.


*/
func (a *Client) Look(params *LookParams) (*LookOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLookParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "look",
		Method:             "GET",
		PathPattern:        "/looks/{look_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LookReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*LookOK), nil
}

/*
RunLook runs look

### Run a Look.

Given a look id and a format, this will run the look's query and return the results.

Suported formats:
- json - plain json
- csv - comma separated values with a header
- txt - tab separated values with a header
- html - simple html
- md - simple markdown
- sql - shows the generated SQL rather than running the query
- png - a PNG image of the visualization of the query
- jpg - a JPG image of the visualization of the query
- unified - json that is annotated with additional metadata as used by the Looker web application



*/
func (a *Client) RunLook(params *RunLookParams) (*RunLookOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRunLookParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "run_look",
		Method:             "GET",
		PathPattern:        "/looks/{look_id}/run/{format}",
		ProducesMediaTypes: []string{"application/json", "image/jpg", "image/png", "text"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RunLookReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*RunLookOK), nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
