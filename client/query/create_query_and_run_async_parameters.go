package query

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewCreateQueryAndRunAsyncParams creates a new CreateQueryAndRunAsyncParams object
// with the default values initialized.
func NewCreateQueryAndRunAsyncParams() *CreateQueryAndRunAsyncParams {
	var ()
	return &CreateQueryAndRunAsyncParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewCreateQueryAndRunAsyncParamsWithTimeout creates a new CreateQueryAndRunAsyncParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewCreateQueryAndRunAsyncParamsWithTimeout(timeout time.Duration) *CreateQueryAndRunAsyncParams {
	var ()
	return &CreateQueryAndRunAsyncParams{

		timeout: timeout,
	}
}

/*CreateQueryAndRunAsyncParams contains all the parameters to send to the API endpoint
for the create query and run async operation typically these are written to a http.Request
*/
type CreateQueryAndRunAsyncParams struct {

	/*Body
	  Query data

	*/
	Body
	/*Format
	  Format of the response. Default is json.

	*/
	Format *string

	timeout time.Duration
}

// WithBody adds the body to the create query and run async params
func (o *CreateQueryAndRunAsyncParams) WithBody(Body) *CreateQueryAndRunAsyncParams {
	o.Body = Body
	return o
}

// WithFormat adds the format to the create query and run async params
func (o *CreateQueryAndRunAsyncParams) WithFormat(Format *string) *CreateQueryAndRunAsyncParams {
	o.Format = Format
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *CreateQueryAndRunAsyncParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	if err := r.SetBodyParam(o.Body); err != nil {
		return err
	}

	if o.Format != nil {

		// query param format
		var qrFormat string
		if o.Format != nil {
			qrFormat = *o.Format
		}
		qFormat := qrFormat
		if qFormat != "" {
			if err := r.SetQueryParam("format", qFormat); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
