package query

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// RunAsyncReader is a Reader for the RunAsync structure.
type RunAsyncReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the recieved o.
func (o *RunAsyncReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewRunAsyncOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewRunAsyncBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewRunAsyncNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewRunAsyncOK creates a RunAsyncOK with default headers values
func NewRunAsyncOK() *RunAsyncOK {
	return &RunAsyncOK{}
}

/*RunAsyncOK handles this case with default header values.

async query run
*/
type RunAsyncOK struct {
	Payload
}

func (o *RunAsyncOK) Error() string {
	return fmt.Sprintf("[POST /queries/{query_id}/run_async][%d] runAsyncOK  %+v", 200, o.Payload)
}

func (o *RunAsyncOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRunAsyncBadRequest creates a RunAsyncBadRequest with default headers values
func NewRunAsyncBadRequest() *RunAsyncBadRequest {
	return &RunAsyncBadRequest{}
}

/*RunAsyncBadRequest handles this case with default header values.

Bad Request
*/
type RunAsyncBadRequest struct {
	Payload
}

func (o *RunAsyncBadRequest) Error() string {
	return fmt.Sprintf("[POST /queries/{query_id}/run_async][%d] runAsyncBadRequest  %+v", 400, o.Payload)
}

func (o *RunAsyncBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRunAsyncNotFound creates a RunAsyncNotFound with default headers values
func NewRunAsyncNotFound() *RunAsyncNotFound {
	return &RunAsyncNotFound{}
}

/*RunAsyncNotFound handles this case with default header values.

Not Found
*/
type RunAsyncNotFound struct {
	Payload
}

func (o *RunAsyncNotFound) Error() string {
	return fmt.Sprintf("[POST /queries/{query_id}/run_async][%d] runAsyncNotFound  %+v", 404, o.Payload)
}

func (o *RunAsyncNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
