package query

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// CreateQueryAndRunAsyncReader is a Reader for the CreateQueryAndRunAsync structure.
type CreateQueryAndRunAsyncReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the recieved o.
func (o *CreateQueryAndRunAsyncReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewCreateQueryAndRunAsyncOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewCreateQueryAndRunAsyncBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewCreateQueryAndRunAsyncNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewCreateQueryAndRunAsyncOK creates a CreateQueryAndRunAsyncOK with default headers values
func NewCreateQueryAndRunAsyncOK() *CreateQueryAndRunAsyncOK {
	return &CreateQueryAndRunAsyncOK{}
}

/*CreateQueryAndRunAsyncOK handles this case with default header values.

create query and run async
*/
type CreateQueryAndRunAsyncOK struct {
	Payload
}

func (o *CreateQueryAndRunAsyncOK) Error() string {
	return fmt.Sprintf("[POST /queries/run_async][%d] createQueryAndRunAsyncOK  %+v", 200, o.Payload)
}

func (o *CreateQueryAndRunAsyncOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateQueryAndRunAsyncBadRequest creates a CreateQueryAndRunAsyncBadRequest with default headers values
func NewCreateQueryAndRunAsyncBadRequest() *CreateQueryAndRunAsyncBadRequest {
	return &CreateQueryAndRunAsyncBadRequest{}
}

/*CreateQueryAndRunAsyncBadRequest handles this case with default header values.

Bad Request
*/
type CreateQueryAndRunAsyncBadRequest struct {
	Payload
}

func (o *CreateQueryAndRunAsyncBadRequest) Error() string {
	return fmt.Sprintf("[POST /queries/run_async][%d] createQueryAndRunAsyncBadRequest  %+v", 400, o.Payload)
}

func (o *CreateQueryAndRunAsyncBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateQueryAndRunAsyncNotFound creates a CreateQueryAndRunAsyncNotFound with default headers values
func NewCreateQueryAndRunAsyncNotFound() *CreateQueryAndRunAsyncNotFound {
	return &CreateQueryAndRunAsyncNotFound{}
}

/*CreateQueryAndRunAsyncNotFound handles this case with default header values.

Not Found
*/
type CreateQueryAndRunAsyncNotFound struct {
	Payload
}

func (o *CreateQueryAndRunAsyncNotFound) Error() string {
	return fmt.Sprintf("[POST /queries/run_async][%d] createQueryAndRunAsyncNotFound  %+v", 404, o.Payload)
}

func (o *CreateQueryAndRunAsyncNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
