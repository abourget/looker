package query

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewRunURLEncodedQueryParams creates a new RunURLEncodedQueryParams object
// with the default values initialized.
func NewRunURLEncodedQueryParams() *RunURLEncodedQueryParams {
	var ()
	return &RunURLEncodedQueryParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewRunURLEncodedQueryParamsWithTimeout creates a new RunURLEncodedQueryParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewRunURLEncodedQueryParamsWithTimeout(timeout time.Duration) *RunURLEncodedQueryParams {
	var ()
	return &RunURLEncodedQueryParams{

		timeout: timeout,
	}
}

/*RunURLEncodedQueryParams contains all the parameters to send to the API endpoint
for the run url encoded query operation typically these are written to a http.Request
*/
type RunURLEncodedQueryParams struct {

	/*Format
	  Format of result

	*/
	Format string
	/*ModelName
	  Model name

	*/
	ModelName string
	/*ViewName
	  View name

	*/
	ViewName string

	timeout time.Duration
}

// WithFormat adds the format to the run url encoded query params
func (o *RunURLEncodedQueryParams) WithFormat(Format string) *RunURLEncodedQueryParams {
	o.Format = Format
	return o
}

// WithModelName adds the modelName to the run url encoded query params
func (o *RunURLEncodedQueryParams) WithModelName(ModelName string) *RunURLEncodedQueryParams {
	o.ModelName = ModelName
	return o
}

// WithViewName adds the viewName to the run url encoded query params
func (o *RunURLEncodedQueryParams) WithViewName(ViewName string) *RunURLEncodedQueryParams {
	o.ViewName = ViewName
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *RunURLEncodedQueryParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	// path param format
	if err := r.SetPathParam("format", o.Format); err != nil {
		return err
	}

	// path param model_name
	if err := r.SetPathParam("model_name", o.ModelName); err != nil {
		return err
	}

	// path param view_name
	if err := r.SetPathParam("view_name", o.ViewName); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
