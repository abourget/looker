package connection

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewTestConnectionParams creates a new TestConnectionParams object
// with the default values initialized.
func NewTestConnectionParams() *TestConnectionParams {
	var ()
	return &TestConnectionParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewTestConnectionParamsWithTimeout creates a new TestConnectionParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewTestConnectionParamsWithTimeout(timeout time.Duration) *TestConnectionParams {
	var ()
	return &TestConnectionParams{

		timeout: timeout,
	}
}

/*TestConnectionParams contains all the parameters to send to the API endpoint
for the test connection operation typically these are written to a http.Request
*/
type TestConnectionParams struct {

	/*ConnectionName
	  Name of connection

	*/
	ConnectionName string
	/*Tests
	  Array of names of tests to run

	*/
	Tests []string

	timeout time.Duration
}

// WithConnectionName adds the connectionName to the test connection params
func (o *TestConnectionParams) WithConnectionName(ConnectionName string) *TestConnectionParams {
	o.ConnectionName = ConnectionName
	return o
}

// WithTests adds the tests to the test connection params
func (o *TestConnectionParams) WithTests(Tests []string) *TestConnectionParams {
	o.Tests = Tests
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *TestConnectionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	// path param connection_name
	if err := r.SetPathParam("connection_name", o.ConnectionName); err != nil {
		return err
	}

	valuesTests := o.Tests

	joinedTests := swag.JoinByFormat(valuesTests, "")
	// query array param tests
	if err := r.SetQueryParam("tests", joinedTests...); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
