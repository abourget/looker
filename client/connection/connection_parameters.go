package connection

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewConnectionParams creates a new ConnectionParams object
// with the default values initialized.
func NewConnectionParams() *ConnectionParams {
	var ()
	return &ConnectionParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewConnectionParamsWithTimeout creates a new ConnectionParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewConnectionParamsWithTimeout(timeout time.Duration) *ConnectionParams {
	var ()
	return &ConnectionParams{

		timeout: timeout,
	}
}

/*ConnectionParams contains all the parameters to send to the API endpoint
for the connection operation typically these are written to a http.Request
*/
type ConnectionParams struct {

	/*ConnectionName
	  Name of connection

	*/
	ConnectionName string
	/*Fields
	  Requested fields.

	*/
	Fields *string

	timeout time.Duration
}

// WithConnectionName adds the connectionName to the connection params
func (o *ConnectionParams) WithConnectionName(ConnectionName string) *ConnectionParams {
	o.ConnectionName = ConnectionName
	return o
}

// WithFields adds the fields to the connection params
func (o *ConnectionParams) WithFields(Fields *string) *ConnectionParams {
	o.Fields = Fields
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *ConnectionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	// path param connection_name
	if err := r.SetPathParam("connection_name", o.ConnectionName); err != nil {
		return err
	}

	if o.Fields != nil {

		// query param fields
		var qrFields string
		if o.Fields != nil {
			qrFields = *o.Fields
		}
		qFields := qrFields
		if qFields != "" {
			if err := r.SetQueryParam("fields", qFields); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
