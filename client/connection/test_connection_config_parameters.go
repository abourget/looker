package connection

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewTestConnectionConfigParams creates a new TestConnectionConfigParams object
// with the default values initialized.
func NewTestConnectionConfigParams() *TestConnectionConfigParams {
	var ()
	return &TestConnectionConfigParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewTestConnectionConfigParamsWithTimeout creates a new TestConnectionConfigParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewTestConnectionConfigParamsWithTimeout(timeout time.Duration) *TestConnectionConfigParams {
	var ()
	return &TestConnectionConfigParams{

		timeout: timeout,
	}
}

/*TestConnectionConfigParams contains all the parameters to send to the API endpoint
for the test connection config operation typically these are written to a http.Request
*/
type TestConnectionConfigParams struct {

	/*Body
	  Connection

	*/
	Body
	/*Tests
	  Array of names of tests to run

	*/
	Tests []string

	timeout time.Duration
}

// WithBody adds the body to the test connection config params
func (o *TestConnectionConfigParams) WithBody(Body) *TestConnectionConfigParams {
	o.Body = Body
	return o
}

// WithTests adds the tests to the test connection config params
func (o *TestConnectionConfigParams) WithTests(Tests []string) *TestConnectionConfigParams {
	o.Tests = Tests
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *TestConnectionConfigParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	if err := r.SetBodyParam(o.Body); err != nil {
		return err
	}

	valuesTests := o.Tests

	joinedTests := swag.JoinByFormat(valuesTests, "")
	// query array param tests
	if err := r.SetQueryParam("tests", joinedTests...); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
