package sql_query

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// CreateSqlQueryReader is a Reader for the CreateSqlQuery structure.
type CreateSqlQueryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the recieved o.
func (o *CreateSqlQueryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewCreateSqlQueryOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewCreateSqlQueryBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewCreateSqlQueryNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewCreateSqlQueryOK creates a CreateSqlQueryOK with default headers values
func NewCreateSqlQueryOK() *CreateSqlQueryOK {
	return &CreateSqlQueryOK{}
}

/*CreateSqlQueryOK handles this case with default header values.

SQL Runner query
*/
type CreateSqlQueryOK struct {
	Payload
}

func (o *CreateSqlQueryOK) Error() string {
	return fmt.Sprintf("[POST /sql_queries][%d] createSqlQueryOK  %+v", 200, o.Payload)
}

func (o *CreateSqlQueryOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateSqlQueryBadRequest creates a CreateSqlQueryBadRequest with default headers values
func NewCreateSqlQueryBadRequest() *CreateSqlQueryBadRequest {
	return &CreateSqlQueryBadRequest{}
}

/*CreateSqlQueryBadRequest handles this case with default header values.

Bad Request
*/
type CreateSqlQueryBadRequest struct {
	Payload
}

func (o *CreateSqlQueryBadRequest) Error() string {
	return fmt.Sprintf("[POST /sql_queries][%d] createSqlQueryBadRequest  %+v", 400, o.Payload)
}

func (o *CreateSqlQueryBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateSqlQueryNotFound creates a CreateSqlQueryNotFound with default headers values
func NewCreateSqlQueryNotFound() *CreateSqlQueryNotFound {
	return &CreateSqlQueryNotFound{}
}

/*CreateSqlQueryNotFound handles this case with default header values.

Not Found
*/
type CreateSqlQueryNotFound struct {
	Payload
}

func (o *CreateSqlQueryNotFound) Error() string {
	return fmt.Sprintf("[POST /sql_queries][%d] createSqlQueryNotFound  %+v", 404, o.Payload)
}

func (o *CreateSqlQueryNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
