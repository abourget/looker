package sql_query

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// SqlQueryReader is a Reader for the SqlQuery structure.
type SqlQueryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the recieved o.
func (o *SqlQueryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewSqlQueryOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewSqlQueryBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewSqlQueryNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewSqlQueryOK creates a SqlQueryOK with default headers values
func NewSqlQueryOK() *SqlQueryOK {
	return &SqlQueryOK{}
}

/*SqlQueryOK handles this case with default header values.

SQL Runner query
*/
type SqlQueryOK struct {
	Payload
}

func (o *SqlQueryOK) Error() string {
	return fmt.Sprintf("[GET /sql_queries/{slug}][%d] sqlQueryOK  %+v", 200, o.Payload)
}

func (o *SqlQueryOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSqlQueryBadRequest creates a SqlQueryBadRequest with default headers values
func NewSqlQueryBadRequest() *SqlQueryBadRequest {
	return &SqlQueryBadRequest{}
}

/*SqlQueryBadRequest handles this case with default header values.

Bad Request
*/
type SqlQueryBadRequest struct {
	Payload
}

func (o *SqlQueryBadRequest) Error() string {
	return fmt.Sprintf("[GET /sql_queries/{slug}][%d] sqlQueryBadRequest  %+v", 400, o.Payload)
}

func (o *SqlQueryBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSqlQueryNotFound creates a SqlQueryNotFound with default headers values
func NewSqlQueryNotFound() *SqlQueryNotFound {
	return &SqlQueryNotFound{}
}

/*SqlQueryNotFound handles this case with default header values.

Not Found
*/
type SqlQueryNotFound struct {
	Payload
}

func (o *SqlQueryNotFound) Error() string {
	return fmt.Sprintf("[GET /sql_queries/{slug}][%d] sqlQueryNotFound  %+v", 404, o.Payload)
}

func (o *SqlQueryNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
