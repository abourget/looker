package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new user API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for user API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
AllUserAccessFilters gets all access filters

### Access filter for the specified user.
*/
func (a *Client) AllUserAccessFilters(params *AllUserAccessFiltersParams) (*AllUserAccessFiltersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAllUserAccessFiltersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "all_user_access_filters",
		Method:             "GET",
		PathPattern:        "/users/{user_id}/access_filters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AllUserAccessFiltersReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*AllUserAccessFiltersOK), nil
}

/*
AllUserCredentialsAPI3S gets all API 3 credentials

### API 3 login information for the specified user. This is for the newer API keys that can be added for any user.
*/
func (a *Client) AllUserCredentialsAPI3S(params *AllUserCredentialsAPI3SParams) (*AllUserCredentialsAPI3SOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAllUserCredentialsAPI3SParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "all_user_credentials_api3s",
		Method:             "GET",
		PathPattern:        "/users/{user_id}/credentials_api3",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AllUserCredentialsAPI3SReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*AllUserCredentialsAPI3SOK), nil
}

/*
AllUserCredentialsEmbeds gets all embedding credentials

### Embed login information for the specified user.
*/
func (a *Client) AllUserCredentialsEmbeds(params *AllUserCredentialsEmbedsParams) (*AllUserCredentialsEmbedsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAllUserCredentialsEmbedsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "all_user_credentials_embeds",
		Method:             "GET",
		PathPattern:        "/users/{user_id}/credentials_embed",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AllUserCredentialsEmbedsReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*AllUserCredentialsEmbedsOK), nil
}

/*
AllUserSessions gets all web login sessions

### Web login session for the specified user.
*/
func (a *Client) AllUserSessions(params *AllUserSessionsParams) (*AllUserSessionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAllUserSessionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "all_user_sessions",
		Method:             "GET",
		PathPattern:        "/users/{user_id}/sessions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AllUserSessionsReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*AllUserSessionsOK), nil
}

/*
AllUsers gets all users

### Get information about all users.

*/
func (a *Client) AllUsers(params *AllUsersParams) (*AllUsersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAllUsersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "all_users",
		Method:             "GET",
		PathPattern:        "/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AllUsersReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*AllUsersOK), nil
}

/*
CreateUser creates a user

### Create a user with the specified information.

*/
func (a *Client) CreateUser(params *CreateUserParams) (*CreateUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "create_user",
		Method:             "POST",
		PathPattern:        "/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateUserReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateUserOK), nil
}

/*
CreateUserAccessFilter creates access filter

### Access filter for the specified user.
*/
func (a *Client) CreateUserAccessFilter(params *CreateUserAccessFilterParams) (*CreateUserAccessFilterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateUserAccessFilterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "create_user_access_filter",
		Method:             "POST",
		PathPattern:        "/users/{user_id}/access_filters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateUserAccessFilterReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateUserAccessFilterOK), nil
}

/*
CreateUserCredentialsAPI creates API credential

### API login information for the specified user. This is for 'API Users' used for the 'old' query API.
*/
func (a *Client) CreateUserCredentialsAPI(params *CreateUserCredentialsAPIParams) (*CreateUserCredentialsAPIOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateUserCredentialsAPIParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "create_user_credentials_api",
		Method:             "POST",
		PathPattern:        "/users/{user_id}/credentials_api",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateUserCredentialsAPIReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateUserCredentialsAPIOK), nil
}

/*
CreateUserCredentialsApi3 creates API 3 credential

### API 3 login information for the specified user. This is for the newer API keys that can be added for any user.
*/
func (a *Client) CreateUserCredentialsApi3(params *CreateUserCredentialsApi3Params) (*CreateUserCredentialsApi3OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateUserCredentialsApi3Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "create_user_credentials_api3",
		Method:             "POST",
		PathPattern:        "/users/{user_id}/credentials_api3",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateUserCredentialsApi3Reader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateUserCredentialsApi3OK), nil
}

/*
CreateUserCredentialsEmail creates email password credential

### Email/password login information for the specified user.
*/
func (a *Client) CreateUserCredentialsEmail(params *CreateUserCredentialsEmailParams) (*CreateUserCredentialsEmailOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateUserCredentialsEmailParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "create_user_credentials_email",
		Method:             "POST",
		PathPattern:        "/users/{user_id}/credentials_email",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateUserCredentialsEmailReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateUserCredentialsEmailOK), nil
}

/*
CreateUserCredentialsEmailPasswordReset creates a email password credential password reset token

### Create a password reset token.
This will create a cryptographically secure random password reset token for the user.
If the user already has a password reset token then this invalidates the old token and creates a new one.
The token is expressed as the 'password_reset_url' of the user's email/password credential object.
This takes an optional 'expires' param to indicate if the new token should be an expiring token.
Tokens that expire are typically used for self-service password resets for existing users.
Invitiation emails for new users typically are not set to expire.
The expire period is always 60 minutes when expires is enabled.
This method can be called with an empty body.

*/
func (a *Client) CreateUserCredentialsEmailPasswordReset(params *CreateUserCredentialsEmailPasswordResetParams) (*CreateUserCredentialsEmailPasswordResetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateUserCredentialsEmailPasswordResetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "create_user_credentials_email_password_reset",
		Method:             "POST",
		PathPattern:        "/users/{user_id}/credentials_email/password_reset",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateUserCredentialsEmailPasswordResetReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateUserCredentialsEmailPasswordResetOK), nil
}

/*
CreateUserCredentialsTotp creates two factor credential

### Two-factor login information for the specified user.
*/
func (a *Client) CreateUserCredentialsTotp(params *CreateUserCredentialsTotpParams) (*CreateUserCredentialsTotpOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateUserCredentialsTotpParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "create_user_credentials_totp",
		Method:             "POST",
		PathPattern:        "/users/{user_id}/credentials_totp",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateUserCredentialsTotpReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateUserCredentialsTotpOK), nil
}

/*
DeleteUser deletes a user

### Delete the user with a specific id.

**DANGER** this will delete the user and all looks and other information owned by the user.

*/
func (a *Client) DeleteUser(params *DeleteUserParams) (*DeleteUserNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "delete_user",
		Method:             "DELETE",
		PathPattern:        "/users/{user_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteUserReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteUserNoContent), nil
}

/*
DeleteUserAccessFilter deletes access filter

### Access filter for the specified user.
*/
func (a *Client) DeleteUserAccessFilter(params *DeleteUserAccessFilterParams) (*DeleteUserAccessFilterNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUserAccessFilterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "delete_user_access_filter",
		Method:             "DELETE",
		PathPattern:        "/users/{user_id}/access_filters/{access_filter_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteUserAccessFilterReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteUserAccessFilterNoContent), nil
}

/*
DeleteUserCredentialsAPI deletes API credential

### API login information for the specified user. This is for 'API Users' used for the 'old' query API.
*/
func (a *Client) DeleteUserCredentialsAPI(params *DeleteUserCredentialsAPIParams) (*DeleteUserCredentialsAPINoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUserCredentialsAPIParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "delete_user_credentials_api",
		Method:             "DELETE",
		PathPattern:        "/users/{user_id}/credentials_api",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteUserCredentialsAPIReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteUserCredentialsAPINoContent), nil
}

/*
DeleteUserCredentialsApi3 deletes API 3 credential

### API 3 login information for the specified user. This is for the newer API keys that can be added for any user.
*/
func (a *Client) DeleteUserCredentialsApi3(params *DeleteUserCredentialsApi3Params) (*DeleteUserCredentialsApi3NoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUserCredentialsApi3Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "delete_user_credentials_api3",
		Method:             "DELETE",
		PathPattern:        "/users/{user_id}/credentials_api3/{credentials_api3_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteUserCredentialsApi3Reader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteUserCredentialsApi3NoContent), nil
}

/*
DeleteUserCredentialsEmail deletes email password credential

### Email/password login information for the specified user.
*/
func (a *Client) DeleteUserCredentialsEmail(params *DeleteUserCredentialsEmailParams) (*DeleteUserCredentialsEmailNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUserCredentialsEmailParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "delete_user_credentials_email",
		Method:             "DELETE",
		PathPattern:        "/users/{user_id}/credentials_email",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteUserCredentialsEmailReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteUserCredentialsEmailNoContent), nil
}

/*
DeleteUserCredentialsEmbed deletes embedding credential

### Embed login information for the specified user.
*/
func (a *Client) DeleteUserCredentialsEmbed(params *DeleteUserCredentialsEmbedParams) (*DeleteUserCredentialsEmbedNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUserCredentialsEmbedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "delete_user_credentials_embed",
		Method:             "DELETE",
		PathPattern:        "/users/{user_id}/credentials_embed/{credentials_embed_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteUserCredentialsEmbedReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteUserCredentialsEmbedNoContent), nil
}

/*
DeleteUserCredentialsGoogle deletes google auth credential

### Google authentication login information for the specified user.
*/
func (a *Client) DeleteUserCredentialsGoogle(params *DeleteUserCredentialsGoogleParams) (*DeleteUserCredentialsGoogleNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUserCredentialsGoogleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "delete_user_credentials_google",
		Method:             "DELETE",
		PathPattern:        "/users/{user_id}/credentials_google",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteUserCredentialsGoogleReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteUserCredentialsGoogleNoContent), nil
}

/*
DeleteUserCredentialsLdap deletes l d a p credential

### LDAP login information for the specified user.
*/
func (a *Client) DeleteUserCredentialsLdap(params *DeleteUserCredentialsLdapParams) (*DeleteUserCredentialsLdapNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUserCredentialsLdapParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "delete_user_credentials_ldap",
		Method:             "DELETE",
		PathPattern:        "/users/{user_id}/credentials_ldap",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteUserCredentialsLdapReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteUserCredentialsLdapNoContent), nil
}

/*
DeleteUserCredentialsLookerOpenid deletes looker openid credential

### Looker Openid login information for the specified user. Used by Looker Analysts.
*/
func (a *Client) DeleteUserCredentialsLookerOpenid(params *DeleteUserCredentialsLookerOpenidParams) (*DeleteUserCredentialsLookerOpenidNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUserCredentialsLookerOpenidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "delete_user_credentials_looker_openid",
		Method:             "DELETE",
		PathPattern:        "/users/{user_id}/credentials_looker_openid",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteUserCredentialsLookerOpenidReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteUserCredentialsLookerOpenidNoContent), nil
}

/*
DeleteUserCredentialsSaml deletes saml auth credential

### Saml authentication login information for the specified user.
*/
func (a *Client) DeleteUserCredentialsSaml(params *DeleteUserCredentialsSamlParams) (*DeleteUserCredentialsSamlNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUserCredentialsSamlParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "delete_user_credentials_saml",
		Method:             "DELETE",
		PathPattern:        "/users/{user_id}/credentials_saml",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteUserCredentialsSamlReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteUserCredentialsSamlNoContent), nil
}

/*
DeleteUserCredentialsTotp deletes two factor credential

### Two-factor login information for the specified user.
*/
func (a *Client) DeleteUserCredentialsTotp(params *DeleteUserCredentialsTotpParams) (*DeleteUserCredentialsTotpNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUserCredentialsTotpParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "delete_user_credentials_totp",
		Method:             "DELETE",
		PathPattern:        "/users/{user_id}/credentials_totp",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteUserCredentialsTotpReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteUserCredentialsTotpNoContent), nil
}

/*
DeleteUserSession deletes web login session

### Web login session for the specified user.
*/
func (a *Client) DeleteUserSession(params *DeleteUserSessionParams) (*DeleteUserSessionNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUserSessionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "delete_user_session",
		Method:             "DELETE",
		PathPattern:        "/users/{user_id}/sessions/{session_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteUserSessionReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteUserSessionNoContent), nil
}

/*
Me gets current user

### Get information about the current user; i.e. the user account currently calling the API.

*/
func (a *Client) Me(params *MeParams) (*MeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "me",
		Method:             "GET",
		PathPattern:        "/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MeReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*MeOK), nil
}

/*
SearchUsers searches users

### Search users.

*/
func (a *Client) SearchUsers(params *SearchUsersParams) (*SearchUsersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchUsersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "search_users",
		Method:             "GET",
		PathPattern:        "/users/search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchUsersReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*SearchUsersOK), nil
}

/*
SearchUsersNames searches users names

### Search users where first_name OR last_name OR email matches a string.

The results will be AND'd with any additional search parameters that are (optionally) included.

*/
func (a *Client) SearchUsersNames(params *SearchUsersNamesParams) (*SearchUsersNamesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchUsersNamesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "search_users_names",
		Method:             "GET",
		PathPattern:        "/users/search/names/{pattern}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchUsersNamesReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*SearchUsersNamesOK), nil
}

/*
SetUserRoles sets roles for a user

### Set roles of the user with a specific id.

*/
func (a *Client) SetUserRoles(params *SetUserRolesParams) (*SetUserRolesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetUserRolesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "set_user_roles",
		Method:             "PUT",
		PathPattern:        "/users/{user_id}/roles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetUserRolesReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*SetUserRolesOK), nil
}

/*
UpdateUser updates a user

### Update information about the user with a specific id.

*/
func (a *Client) UpdateUser(params *UpdateUserParams) (*UpdateUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "update_user",
		Method:             "PATCH",
		PathPattern:        "/users/{user_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateUserReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateUserOK), nil
}

/*
UpdateUserAccessFilter updates access filter

### Access filter for the specified user.
*/
func (a *Client) UpdateUserAccessFilter(params *UpdateUserAccessFilterParams) (*UpdateUserAccessFilterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateUserAccessFilterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "update_user_access_filter",
		Method:             "PATCH",
		PathPattern:        "/users/{user_id}/access_filters/{access_filter_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateUserAccessFilterReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateUserAccessFilterOK), nil
}

/*
UpdateUserCredentialsEmail updates email password credential

### Email/password login information for the specified user.
*/
func (a *Client) UpdateUserCredentialsEmail(params *UpdateUserCredentialsEmailParams) (*UpdateUserCredentialsEmailOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateUserCredentialsEmailParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "update_user_credentials_email",
		Method:             "PATCH",
		PathPattern:        "/users/{user_id}/credentials_email",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateUserCredentialsEmailReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateUserCredentialsEmailOK), nil
}

/*
User gets a user

### Get information about the user with a specific id.

If the caller is an admin or the caller is the user being specified, then full user information will
be returned. Otherwise, a minimal 'public' variant of the user information will be returned. This contains
The user name and avatar url, but no sensitive information.

*/
func (a *Client) User(params *UserParams) (*UserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "user",
		Method:             "GET",
		PathPattern:        "/users/{user_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*UserOK), nil
}

/*
UserAccessFilter gets access filter

### Access filter for the specified user.
*/
func (a *Client) UserAccessFilter(params *UserAccessFilterParams) (*UserAccessFilterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserAccessFilterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "user_access_filter",
		Method:             "GET",
		PathPattern:        "/users/{user_id}/access_filters/{access_filter_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserAccessFilterReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*UserAccessFilterOK), nil
}

/*
UserCredentialsAPI gets API credential

### API login information for the specified user. This is for 'API Users' used for the 'old' query API.
*/
func (a *Client) UserCredentialsAPI(params *UserCredentialsAPIParams) (*UserCredentialsAPIOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserCredentialsAPIParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "user_credentials_api",
		Method:             "GET",
		PathPattern:        "/users/{user_id}/credentials_api",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserCredentialsAPIReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*UserCredentialsAPIOK), nil
}

/*
UserCredentialsApi3 gets API 3 credential

### API 3 login information for the specified user. This is for the newer API keys that can be added for any user.
*/
func (a *Client) UserCredentialsApi3(params *UserCredentialsApi3Params) (*UserCredentialsApi3OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserCredentialsApi3Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "user_credentials_api3",
		Method:             "GET",
		PathPattern:        "/users/{user_id}/credentials_api3/{credentials_api3_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserCredentialsApi3Reader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*UserCredentialsApi3OK), nil
}

/*
UserCredentialsEmail gets email password credential

### Email/password login information for the specified user.
*/
func (a *Client) UserCredentialsEmail(params *UserCredentialsEmailParams) (*UserCredentialsEmailOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserCredentialsEmailParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "user_credentials_email",
		Method:             "GET",
		PathPattern:        "/users/{user_id}/credentials_email",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserCredentialsEmailReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*UserCredentialsEmailOK), nil
}

/*
UserCredentialsEmbed gets embedding credential

### Embed login information for the specified user.
*/
func (a *Client) UserCredentialsEmbed(params *UserCredentialsEmbedParams) (*UserCredentialsEmbedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserCredentialsEmbedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "user_credentials_embed",
		Method:             "GET",
		PathPattern:        "/users/{user_id}/credentials_embed/{credentials_embed_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserCredentialsEmbedReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*UserCredentialsEmbedOK), nil
}

/*
UserCredentialsGoogle gets google auth credential

### Google authentication login information for the specified user.
*/
func (a *Client) UserCredentialsGoogle(params *UserCredentialsGoogleParams) (*UserCredentialsGoogleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserCredentialsGoogleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "user_credentials_google",
		Method:             "GET",
		PathPattern:        "/users/{user_id}/credentials_google",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserCredentialsGoogleReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*UserCredentialsGoogleOK), nil
}

/*
UserCredentialsLdap gets l d a p credential

### LDAP login information for the specified user.
*/
func (a *Client) UserCredentialsLdap(params *UserCredentialsLdapParams) (*UserCredentialsLdapOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserCredentialsLdapParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "user_credentials_ldap",
		Method:             "GET",
		PathPattern:        "/users/{user_id}/credentials_ldap",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserCredentialsLdapReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*UserCredentialsLdapOK), nil
}

/*
UserCredentialsLookerOpenid gets looker openid credential

### Looker Openid login information for the specified user. Used by Looker Analysts.
*/
func (a *Client) UserCredentialsLookerOpenid(params *UserCredentialsLookerOpenidParams) (*UserCredentialsLookerOpenidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserCredentialsLookerOpenidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "user_credentials_looker_openid",
		Method:             "GET",
		PathPattern:        "/users/{user_id}/credentials_looker_openid",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserCredentialsLookerOpenidReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*UserCredentialsLookerOpenidOK), nil
}

/*
UserCredentialsSaml gets saml auth credential

### Saml authentication login information for the specified user.
*/
func (a *Client) UserCredentialsSaml(params *UserCredentialsSamlParams) (*UserCredentialsSamlOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserCredentialsSamlParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "user_credentials_saml",
		Method:             "GET",
		PathPattern:        "/users/{user_id}/credentials_saml",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserCredentialsSamlReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*UserCredentialsSamlOK), nil
}

/*
UserCredentialsTotp gets two factor credential

### Two-factor login information for the specified user.
*/
func (a *Client) UserCredentialsTotp(params *UserCredentialsTotpParams) (*UserCredentialsTotpOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserCredentialsTotpParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "user_credentials_totp",
		Method:             "GET",
		PathPattern:        "/users/{user_id}/credentials_totp",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserCredentialsTotpReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*UserCredentialsTotpOK), nil
}

/*
UserRoles gets roles for a user

### Get information about roles of the user with a specific id.

*/
func (a *Client) UserRoles(params *UserRolesParams) (*UserRolesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserRolesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "user_roles",
		Method:             "GET",
		PathPattern:        "/users/{user_id}/roles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserRolesReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*UserRolesOK), nil
}

/*
UserSession gets web login session

### Web login session for the specified user.
*/
func (a *Client) UserSession(params *UserSessionParams) (*UserSessionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserSessionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "user_session",
		Method:             "GET",
		PathPattern:        "/users/{user_id}/sessions/{session_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserSessionReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*UserSessionOK), nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
