package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewDeleteUserCredentialsApi3Params creates a new DeleteUserCredentialsApi3Params object
// with the default values initialized.
func NewDeleteUserCredentialsApi3Params() *DeleteUserCredentialsApi3Params {
	var ()
	return &DeleteUserCredentialsApi3Params{

		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteUserCredentialsApi3ParamsWithTimeout creates a new DeleteUserCredentialsApi3Params object
// with the default values initialized, and the ability to set a timeout on a request
func NewDeleteUserCredentialsApi3ParamsWithTimeout(timeout time.Duration) *DeleteUserCredentialsApi3Params {
	var ()
	return &DeleteUserCredentialsApi3Params{

		timeout: timeout,
	}
}

/*DeleteUserCredentialsApi3Params contains all the parameters to send to the API endpoint
for the delete user credentials api3 operation typically these are written to a http.Request
*/
type DeleteUserCredentialsApi3Params struct {

	/*CredentialsApi3ID
	  id of API 3 credential

	*/
	CredentialsApi3ID int64
	/*UserID
	  id of user

	*/
	UserID int64

	timeout time.Duration
}

// WithCredentialsApi3ID adds the credentialsApi3Id to the delete user credentials api3 params
func (o *DeleteUserCredentialsApi3Params) WithCredentialsApi3ID(CredentialsApi3ID int64) *DeleteUserCredentialsApi3Params {
	o.CredentialsApi3ID = CredentialsApi3ID
	return o
}

// WithUserID adds the userId to the delete user credentials api3 params
func (o *DeleteUserCredentialsApi3Params) WithUserID(UserID int64) *DeleteUserCredentialsApi3Params {
	o.UserID = UserID
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteUserCredentialsApi3Params) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	// path param credentials_api3_id
	if err := r.SetPathParam("credentials_api3_id", swag.FormatInt64(o.CredentialsApi3ID)); err != nil {
		return err
	}

	// path param user_id
	if err := r.SetPathParam("user_id", swag.FormatInt64(o.UserID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
