package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewSearchUsersNamesParams creates a new SearchUsersNamesParams object
// with the default values initialized.
func NewSearchUsersNamesParams() *SearchUsersNamesParams {
	var ()
	return &SearchUsersNamesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewSearchUsersNamesParamsWithTimeout creates a new SearchUsersNamesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewSearchUsersNamesParamsWithTimeout(timeout time.Duration) *SearchUsersNamesParams {
	var ()
	return &SearchUsersNamesParams{

		timeout: timeout,
	}
}

/*SearchUsersNamesParams contains all the parameters to send to the API endpoint
for the search users names operation typically these are written to a http.Request
*/
type SearchUsersNamesParams struct {

	/*Email
	  Match Email Address.

	*/
	Email *string
	/*Fields
	  Requested fields.

	*/
	Fields *string
	/*FirstName
	  Match First name.

	*/
	FirstName *string
	/*ID
	  Match User Id.

	*/
	ID *int64
	/*IsDisabled
	  Match Is disabled.

	*/
	IsDisabled *bool
	/*LastName
	  Match Last name.

	*/
	LastName *string
	/*Page
	  Requested page.

	*/
	Page *int64
	/*Pattern
	  Pattern to match.

	*/
	Pattern string
	/*PerPage
	  Results per page.

	*/
	PerPage *int64
	/*Sorts
	  Fields to sort by.

	*/
	Sorts *string
	/*VerifiedLookerEmployee
	  Match Verified Looker employee.

	*/
	VerifiedLookerEmployee *bool

	timeout time.Duration
}

// WithEmail adds the email to the search users names params
func (o *SearchUsersNamesParams) WithEmail(Email *string) *SearchUsersNamesParams {
	o.Email = Email
	return o
}

// WithFields adds the fields to the search users names params
func (o *SearchUsersNamesParams) WithFields(Fields *string) *SearchUsersNamesParams {
	o.Fields = Fields
	return o
}

// WithFirstName adds the firstName to the search users names params
func (o *SearchUsersNamesParams) WithFirstName(FirstName *string) *SearchUsersNamesParams {
	o.FirstName = FirstName
	return o
}

// WithID adds the id to the search users names params
func (o *SearchUsersNamesParams) WithID(ID *int64) *SearchUsersNamesParams {
	o.ID = ID
	return o
}

// WithIsDisabled adds the isDisabled to the search users names params
func (o *SearchUsersNamesParams) WithIsDisabled(IsDisabled *bool) *SearchUsersNamesParams {
	o.IsDisabled = IsDisabled
	return o
}

// WithLastName adds the lastName to the search users names params
func (o *SearchUsersNamesParams) WithLastName(LastName *string) *SearchUsersNamesParams {
	o.LastName = LastName
	return o
}

// WithPage adds the page to the search users names params
func (o *SearchUsersNamesParams) WithPage(Page *int64) *SearchUsersNamesParams {
	o.Page = Page
	return o
}

// WithPattern adds the pattern to the search users names params
func (o *SearchUsersNamesParams) WithPattern(Pattern string) *SearchUsersNamesParams {
	o.Pattern = Pattern
	return o
}

// WithPerPage adds the perPage to the search users names params
func (o *SearchUsersNamesParams) WithPerPage(PerPage *int64) *SearchUsersNamesParams {
	o.PerPage = PerPage
	return o
}

// WithSorts adds the sorts to the search users names params
func (o *SearchUsersNamesParams) WithSorts(Sorts *string) *SearchUsersNamesParams {
	o.Sorts = Sorts
	return o
}

// WithVerifiedLookerEmployee adds the verifiedLookerEmployee to the search users names params
func (o *SearchUsersNamesParams) WithVerifiedLookerEmployee(VerifiedLookerEmployee *bool) *SearchUsersNamesParams {
	o.VerifiedLookerEmployee = VerifiedLookerEmployee
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *SearchUsersNamesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	if o.Email != nil {

		// query param email
		var qrEmail string
		if o.Email != nil {
			qrEmail = *o.Email
		}
		qEmail := qrEmail
		if qEmail != "" {
			if err := r.SetQueryParam("email", qEmail); err != nil {
				return err
			}
		}

	}

	if o.Fields != nil {

		// query param fields
		var qrFields string
		if o.Fields != nil {
			qrFields = *o.Fields
		}
		qFields := qrFields
		if qFields != "" {
			if err := r.SetQueryParam("fields", qFields); err != nil {
				return err
			}
		}

	}

	if o.FirstName != nil {

		// query param first_name
		var qrFirstName string
		if o.FirstName != nil {
			qrFirstName = *o.FirstName
		}
		qFirstName := qrFirstName
		if qFirstName != "" {
			if err := r.SetQueryParam("first_name", qFirstName); err != nil {
				return err
			}
		}

	}

	if o.ID != nil {

		// query param id
		var qrID int64
		if o.ID != nil {
			qrID = *o.ID
		}
		qID := swag.FormatInt64(qrID)
		if qID != "" {
			if err := r.SetQueryParam("id", qID); err != nil {
				return err
			}
		}

	}

	if o.IsDisabled != nil {

		// query param is_disabled
		var qrIsDisabled bool
		if o.IsDisabled != nil {
			qrIsDisabled = *o.IsDisabled
		}
		qIsDisabled := swag.FormatBool(qrIsDisabled)
		if qIsDisabled != "" {
			if err := r.SetQueryParam("is_disabled", qIsDisabled); err != nil {
				return err
			}
		}

	}

	if o.LastName != nil {

		// query param last_name
		var qrLastName string
		if o.LastName != nil {
			qrLastName = *o.LastName
		}
		qLastName := qrLastName
		if qLastName != "" {
			if err := r.SetQueryParam("last_name", qLastName); err != nil {
				return err
			}
		}

	}

	if o.Page != nil {

		// query param page
		var qrPage int64
		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt64(qrPage)
		if qPage != "" {
			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}

	}

	// path param pattern
	if err := r.SetPathParam("pattern", o.Pattern); err != nil {
		return err
	}

	if o.PerPage != nil {

		// query param per_page
		var qrPerPage int64
		if o.PerPage != nil {
			qrPerPage = *o.PerPage
		}
		qPerPage := swag.FormatInt64(qrPerPage)
		if qPerPage != "" {
			if err := r.SetQueryParam("per_page", qPerPage); err != nil {
				return err
			}
		}

	}

	if o.Sorts != nil {

		// query param sorts
		var qrSorts string
		if o.Sorts != nil {
			qrSorts = *o.Sorts
		}
		qSorts := qrSorts
		if qSorts != "" {
			if err := r.SetQueryParam("sorts", qSorts); err != nil {
				return err
			}
		}

	}

	if o.VerifiedLookerEmployee != nil {

		// query param verified_looker_employee
		var qrVerifiedLookerEmployee bool
		if o.VerifiedLookerEmployee != nil {
			qrVerifiedLookerEmployee = *o.VerifiedLookerEmployee
		}
		qVerifiedLookerEmployee := swag.FormatBool(qrVerifiedLookerEmployee)
		if qVerifiedLookerEmployee != "" {
			if err := r.SetQueryParam("verified_looker_employee", qVerifiedLookerEmployee); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
