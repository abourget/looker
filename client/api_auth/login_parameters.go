package api_auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewLoginParams creates a new LoginParams object
// with the default values initialized.
func NewLoginParams() *LoginParams {
	var ()
	return &LoginParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewLoginParamsWithTimeout creates a new LoginParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewLoginParamsWithTimeout(timeout time.Duration) *LoginParams {
	var ()
	return &LoginParams{

		timeout: timeout,
	}
}

/*LoginParams contains all the parameters to send to the API endpoint
for the login operation typically these are written to a http.Request
*/
type LoginParams struct {

	/*ClientID
	  client_id part of API3 Key.

	*/
	ClientID *string
	/*ClientSecret
	  client_secret part of API3 Key.

	*/
	ClientSecret *string

	timeout time.Duration
}

// WithClientID adds the clientId to the login params
func (o *LoginParams) WithClientID(ClientID *string) *LoginParams {
	o.ClientID = ClientID
	return o
}

// WithClientSecret adds the clientSecret to the login params
func (o *LoginParams) WithClientSecret(ClientSecret *string) *LoginParams {
	o.ClientSecret = ClientSecret
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *LoginParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	if o.ClientID != nil {

		// query param client_id
		var qrClientID string
		if o.ClientID != nil {
			qrClientID = *o.ClientID
		}
		qClientID := qrClientID
		if qClientID != "" {
			if err := r.SetQueryParam("client_id", qClientID); err != nil {
				return err
			}
		}

	}

	if o.ClientSecret != nil {

		// query param client_secret
		var qrClientSecret string
		if o.ClientSecret != nil {
			qrClientSecret = *o.ClientSecret
		}
		qClientSecret := qrClientSecret
		if qClientSecret != "" {
			if err := r.SetQueryParam("client_secret", qClientSecret); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
