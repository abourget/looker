package config

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewUpdateLegacyFeatureParams creates a new UpdateLegacyFeatureParams object
// with the default values initialized.
func NewUpdateLegacyFeatureParams() *UpdateLegacyFeatureParams {
	var ()
	return &UpdateLegacyFeatureParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateLegacyFeatureParamsWithTimeout creates a new UpdateLegacyFeatureParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdateLegacyFeatureParamsWithTimeout(timeout time.Duration) *UpdateLegacyFeatureParams {
	var ()
	return &UpdateLegacyFeatureParams{

		timeout: timeout,
	}
}

/*UpdateLegacyFeatureParams contains all the parameters to send to the API endpoint
for the update legacy feature operation typically these are written to a http.Request
*/
type UpdateLegacyFeatureParams struct {

	/*Body
	  legacy feature

	*/
	Body
	/*LegacyFeatureID
	  id of legacy feature

	*/
	LegacyFeatureID int64

	timeout time.Duration
}

// WithBody adds the body to the update legacy feature params
func (o *UpdateLegacyFeatureParams) WithBody(Body) *UpdateLegacyFeatureParams {
	o.Body = Body
	return o
}

// WithLegacyFeatureID adds the legacyFeatureId to the update legacy feature params
func (o *UpdateLegacyFeatureParams) WithLegacyFeatureID(LegacyFeatureID int64) *UpdateLegacyFeatureParams {
	o.LegacyFeatureID = LegacyFeatureID
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateLegacyFeatureParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	if err := r.SetBodyParam(o.Body); err != nil {
		return err
	}

	// path param legacy_feature_id
	if err := r.SetPathParam("legacy_feature_id", swag.FormatInt64(o.LegacyFeatureID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
