package role

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// UpdatePermissionSetReader is a Reader for the UpdatePermissionSet structure.
type UpdatePermissionSetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the recieved o.
func (o *UpdatePermissionSetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewUpdatePermissionSetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewUpdatePermissionSetBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewUpdatePermissionSetNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdatePermissionSetOK creates a UpdatePermissionSetOK with default headers values
func NewUpdatePermissionSetOK() *UpdatePermissionSetOK {
	return &UpdatePermissionSetOK{}
}

/*UpdatePermissionSetOK handles this case with default header values.

New state for specified permission set.
*/
type UpdatePermissionSetOK struct {
	Payload
}

func (o *UpdatePermissionSetOK) Error() string {
	return fmt.Sprintf("[PATCH /permission_sets/{permission_set_id}][%d] updatePermissionSetOK  %+v", 200, o.Payload)
}

func (o *UpdatePermissionSetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdatePermissionSetBadRequest creates a UpdatePermissionSetBadRequest with default headers values
func NewUpdatePermissionSetBadRequest() *UpdatePermissionSetBadRequest {
	return &UpdatePermissionSetBadRequest{}
}

/*UpdatePermissionSetBadRequest handles this case with default header values.

Bad Request
*/
type UpdatePermissionSetBadRequest struct {
	Payload
}

func (o *UpdatePermissionSetBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /permission_sets/{permission_set_id}][%d] updatePermissionSetBadRequest  %+v", 400, o.Payload)
}

func (o *UpdatePermissionSetBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdatePermissionSetNotFound creates a UpdatePermissionSetNotFound with default headers values
func NewUpdatePermissionSetNotFound() *UpdatePermissionSetNotFound {
	return &UpdatePermissionSetNotFound{}
}

/*UpdatePermissionSetNotFound handles this case with default header values.

Not Found
*/
type UpdatePermissionSetNotFound struct {
	Payload
}

func (o *UpdatePermissionSetNotFound) Error() string {
	return fmt.Sprintf("[PATCH /permission_sets/{permission_set_id}][%d] updatePermissionSetNotFound  %+v", 404, o.Payload)
}

func (o *UpdatePermissionSetNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
