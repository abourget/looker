package dashboard

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
  "os"
  "net/http"
  "github.com/go-openapi/runtime"
  "github.com/go-openapi/swag"
  "github.com/go-openapi/errors"
  "github.com/go-openapi/validate"
  cr "github.com/go-openapi/runtime/client"

  strfmt "github.com/go-openapi/strfmt"

  "github.com/abourget/looker/models"
  
  
)

// NewDashboardPrefetchParams creates a new DashboardPrefetchParams object
// with the default values initialized.
func NewDashboardPrefetchParams() *DashboardPrefetchParams {
  var (
  
  )
  return &DashboardPrefetchParams{
  
    timeout: cr.DefaultTimeout,
  }
}

// NewDashboardPrefetchParamsWithTimeout creates a new DashboardPrefetchParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDashboardPrefetchParamsWithTimeout(timeout time.Duration) *DashboardPrefetchParams {
  var (
  
  )
  return &DashboardPrefetchParams{
  
    timeout: timeout,
  }
}

/*DashboardPrefetchParams contains all the parameters to send to the API endpoint
for the dashboard prefetch operation typically these are written to a http.Request
*/
type DashboardPrefetchParams struct {

  /*DashboardFilters
  JSON encoded string of Dashboard filters that were applied to prefetch

  */
  DashboardFilters []
  /*DashboardID
  Id of dashboard

  */
  DashboardID string
  

  timeout time.Duration
}


// WithDashboardFilters adds the dashboardFilters to the dashboard prefetch params
func (o *DashboardPrefetchParams) WithDashboardFilters(DashboardFilters []) *DashboardPrefetchParams {
  o.DashboardFilters = DashboardFilters
  return o
}


// WithDashboardID adds the dashboardId to the dashboard prefetch params
func (o *DashboardPrefetchParams) WithDashboardID(DashboardID string) *DashboardPrefetchParams {
  o.DashboardID = DashboardID
  return o
}


// WriteToRequest writes these params to a swagger request
func (o *DashboardPrefetchParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

  r.SetTimeout(o.timeout)
  var res []error
  

  
  valuesDashboardFilters := o.DashboardFilters
  
  joinedDashboardFilters := swag.JoinByFormat(valuesDashboardFilters, "")
  // query array param dashboard_filters
  if err := r.SetQueryParam("dashboard_filters", joinedDashboardFilters...); err != nil {
    return err
  }
  

  

  
  

  
  
  
  // path param dashboard_id
  if err := r.SetPathParam("dashboard_id", o.DashboardID); err != nil {
    return err
  }
  
  
  

  
  
  if len(res) > 0 {
    return errors.CompositeValidationError(res...)
  }
  return nil
}
