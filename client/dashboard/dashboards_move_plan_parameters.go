package dashboard

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewDashboardsMovePlanParams creates a new DashboardsMovePlanParams object
// with the default values initialized.
func NewDashboardsMovePlanParams() *DashboardsMovePlanParams {
	var ()
	return &DashboardsMovePlanParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDashboardsMovePlanParamsWithTimeout creates a new DashboardsMovePlanParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDashboardsMovePlanParamsWithTimeout(timeout time.Duration) *DashboardsMovePlanParams {
	var ()
	return &DashboardsMovePlanParams{

		timeout: timeout,
	}
}

/*DashboardsMovePlanParams contains all the parameters to send to the API endpoint
for the dashboards move plan operation typically these are written to a http.Request
*/
type DashboardsMovePlanParams struct {

	/*DashboardIds
	  Dashboard ids to move.

	*/
	DashboardIds []string
	/*SpaceID
	  Destination space id.

	*/
	SpaceID *string

	timeout time.Duration
}

// WithDashboardIds adds the dashboardIds to the dashboards move plan params
func (o *DashboardsMovePlanParams) WithDashboardIds(DashboardIds []string) *DashboardsMovePlanParams {
	o.DashboardIds = DashboardIds
	return o
}

// WithSpaceID adds the spaceId to the dashboards move plan params
func (o *DashboardsMovePlanParams) WithSpaceID(SpaceID *string) *DashboardsMovePlanParams {
	o.SpaceID = SpaceID
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *DashboardsMovePlanParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	valuesDashboardIds := o.DashboardIds

	joinedDashboardIds := swag.JoinByFormat(valuesDashboardIds, "")
	// query array param dashboard_ids
	if err := r.SetQueryParam("dashboard_ids", joinedDashboardIds...); err != nil {
		return err
	}

	if o.SpaceID != nil {

		// query param space_id
		var qrSpaceID string
		if o.SpaceID != nil {
			qrSpaceID = *o.SpaceID
		}
		qSpaceID := qrSpaceID
		if qSpaceID != "" {
			if err := r.SetQueryParam("space_id", qSpaceID); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
