package dashboard

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new dashboard API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for dashboard API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
AllDashboards gets all dashboards

Get information about all dashboards.
*/
func (a *Client) AllDashboards(params *AllDashboardsParams) (*AllDashboardsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAllDashboardsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "all_dashboards",
		Method:             "GET",
		PathPattern:        "/dashboards",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AllDashboardsReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*AllDashboardsOK), nil
}

/*
CopyDashboards copies dashboards to space

### Copy dashboards with specified ids to space
*/
func (a *Client) CopyDashboards(params *CopyDashboardsParams) (*CopyDashboardsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCopyDashboardsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "copy_dashboards",
		Method:             "POST",
		PathPattern:        "/dashboards/copy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CopyDashboardsReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*CopyDashboardsOK), nil
}

/*
CreateDashboard creates dashboard

### Create a dashboard with specified information.
*/
func (a *Client) CreateDashboard(params *CreateDashboardParams) (*CreateDashboardOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDashboardParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "create_dashboard",
		Method:             "POST",
		PathPattern:        "/dashboards",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateDashboardReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateDashboardOK), nil
}

/*
CreateDashboardPrefetch creates a prefetch

### Create a prefetch for a dashboard with the specified information.

*/
func (a *Client) CreateDashboardPrefetch(params *CreateDashboardPrefetchParams) (*CreateDashboardPrefetchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDashboardPrefetchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "create_dashboard_prefetch",
		Method:             "POST",
		PathPattern:        "/dashboards/{dashboard_id}/prefetch",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateDashboardPrefetchReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateDashboardPrefetchOK), nil
}

/*
Dashboard gets dashboard

### Get information about the dashboard with a specific id.
*/
func (a *Client) Dashboard(params *DashboardParams) (*DashboardOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDashboardParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "dashboard",
		Method:             "GET",
		PathPattern:        "/dashboards/{dashboard_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DashboardReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*DashboardOK), nil
}

/*
DashboardPrefetch gets a prefetch

### Get a prefetch for a dashboard with the specified information.

*/
func (a *Client) DashboardPrefetch(params *DashboardPrefetchParams) (*DashboardPrefetchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDashboardPrefetchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "dashboard_prefetch",
		Method:             "GET",
		PathPattern:        "/dashboards/{dashboard_id}/prefetch",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DashboardPrefetchReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*DashboardPrefetchOK), nil
}

/*
DashboardsMovePlan plans for moving dashboards to space

### Plan for moving dashboards with specified ids.
*/
func (a *Client) DashboardsMovePlan(params *DashboardsMovePlanParams) (*DashboardsMovePlanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDashboardsMovePlanParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "dashboards_move_plan",
		Method:             "GET",
		PathPattern:        "/dashboards/move_plan",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DashboardsMovePlanReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*DashboardsMovePlanOK), nil
}

/*
DeleteDashboard deletes dashboard

### Delete the dashboard with a specific id.
*/
func (a *Client) DeleteDashboard(params *DeleteDashboardParams) (*DeleteDashboardNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDashboardParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "delete_dashboard",
		Method:             "DELETE",
		PathPattern:        "/dashboards/{dashboard_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteDashboardReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteDashboardNoContent), nil
}

/*
MoveDashboards moves dashboards to space

### Move dashboards with specified ids to space
*/
func (a *Client) MoveDashboards(params *MoveDashboardsParams) (*MoveDashboardsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMoveDashboardsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "move_dashboards",
		Method:             "PATCH",
		PathPattern:        "/dashboards/move",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MoveDashboardsReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*MoveDashboardsOK), nil
}

/*
UpdateDashboard updates dashboard

### Update the dashboard with a specific id.
*/
func (a *Client) UpdateDashboard(params *UpdateDashboardParams) (*UpdateDashboardOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDashboardParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "update_dashboard",
		Method:             "PATCH",
		PathPattern:        "/dashboards/{dashboard_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateDashboardReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateDashboardOK), nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
